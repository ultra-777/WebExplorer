"use strict";var ApplicationConfiguration=function(){var applicationModuleName="xmen",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("explorer"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),function(){describe("HeaderController",function(){var scope,HeaderController;beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope){scope=$rootScope.$new(),HeaderController=$controller("HeaderController",{$scope:scope})})),it("should expose the authentication service",function(){expect(scope.authentication).toBeTruthy()})})}(),function(){describe("HomeController",function(){var scope,HomeController;beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope){scope=$rootScope.$new(),HomeController=$controller("HomeController",{$scope:scope})})),it("should expose the authentication service",function(){expect(scope.authentication).toBeTruthy()})})}(),angular.module("explorer").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("explorer",{url:"/explorer",templateUrl:"modules/explorer/views/home.client.view.html"})}]),angular.module("explorer").controller("ExplorerController",["$scope","DataService","$modal",function(scope,dataService,modal){function compareChildren(a,b){return a.IsContainer!=b.IsContainer?a.IsContainer===!0?-1:1:a.Name<b.Name?-1:a.Name>b.Name?1:0}scope.currentFolder=null,scope.canBack=!1,scope.path=[],scope.isNavigating=!1,scope.percent=0,scope.transferRate=0,scope.currentBlob=null,scope.upload=function(){alert("cheers")},scope.getCurrentFolderId=function(){return null===scope.currentFolder?null:scope.currentFolder.Id},scope.getParentFolderId=function(){return null===scope.currentFolder?null:scope.currentFolder.Parent},scope.init=function(){scope.getData()},scope.getData=function(){dataService.getData().then(function(data){scope.applyScopeFolder(data)},function(error){alert(error)})},scope.getFolder=function(id){scope.isNavigating=!0,dataService.getFolder(id).then(function(data){scope.isNavigating=!1,scope.applyScopeFolder(data)},function(error){scope.isNavigating=!1,alert(error)})},scope.applyScopeFolder=function(newFolder){null!==newFolder.Children&&newFolder.Children.sort(compareChildren),scope.currentFolder=newFolder,scope.path.push(newFolder),scope.canBack=scope.path.length>1},scope.moveBack=function(){if(!(scope.path.length<2)){var prevoiusItem=scope.path[scope.path.length-2];void 0!==prevoiusItem&&null!==prevoiusItem&&scope.navigate(prevoiusItem.Id)}},scope.navigate=function(id){for(var length=scope.path.length,target=null,i=0;length>i;i++){var candidate=scope.path[i];if(candidate.Id===id)return target=candidate,scope.path.splice(i,length-i),void scope.applyScopeFolder(target)}scope.getFolder(id)},scope.download=function(item){scope.isDownloading=!0,dataService.download(item.Id).then(function(data){scope.isDownloading=!1,scope.saveFile(item.Name,data)},function(error){scope.isDownloading=!1,alert(error)})},scope.getDownloadUrl=function(treeItemData){return dataService.getDownloadUrl(treeItemData.Id)},scope.onDelete=function(node){scope.isNavigating=!0,dataService.delete(node.Id).then(function(data){if(scope.isNavigating=!1,data){for(var index=-1,length=scope.currentFolder.Children.length,i=0;length>i;i++){var candidate=scope.currentFolder.Children[i];if(node.Id===candidate.Id){index=i;break}}index>-1&&scope.currentFolder.Children.splice(index,1)}},function(error){scope.isNavigating=!1,alert(error)})},scope.saveFile=function(sourcePath,sourceData){var modalInstance=modal.open({templateUrl:"fileLoadedView.html",controller:"fileLoadedController",resolve:{fileInfo:function(){var data={name:sourcePath,size:sourceData.length};return data}}});modalInstance.result.then(function(){},function(){})},scope.onNewFolder=function(){var modalInstance=modal.open({templateUrl:"modules/explorer/views/new-folder-view.client.view.html",controller:"NewFolderController",resolve:{children:function(){return scope.currentFolder.Children}}});modalInstance.result.then(function(newFolderName){dataService.newFolder(scope.currentFolder.Id,newFolderName).then(function(newFolder){scope.currentFolder.Children.push(newFolder),scope.currentFolder.Children.sort(compareChildren)},function(error){alert(error)})},function(){})},scope.newTask=function(totalSize){var taskInfo={step:20480,start:0,end:0,total:0,left:0,index:0,percent:-1,refreshState:function(){this.end=this.left>this.step?this.start+this.step:this.start+this.left,this.percent=this.total>0?(this.total-this.left)/this.total:1},init:function(theTotalSize){this.total=theTotalSize,this.start=0,this.left=this.total,this.index=0,this.refreshState()},applyNewData:function(size){this.left=this.left-size,this.start=this.start+size,this.index=this.index+1,this.refreshState()}};return taskInfo.init(totalSize),taskInfo},scope.onStopUploading=function(){null!==scope.currentBlob&&(dataService.releaseBlob(scope.currentBlob),scope.currentBlob=null,scope.$digest())},scope.onUploadFile=function(){var modalInstance=modal.open({templateUrl:"modules/explorer/views/upload-file-view.client.view.html",controller:"UploadFileController",resolve:{children:function(){return scope.currentFolder.Children}}});modalInstance.result.then(function(fileInfo){if(!(window.File&&window.FileReader&&window.FileList&&window.Blob))return void alert("File API не поддерживается данным браузером");var taskInfo=scope.newTask(fileInfo.source.size);dataService.initBlob(scope.currentFolder.Id,fileInfo.name,fileInfo.source.size,taskInfo.step).then(function(blobIdObject){var d=new Date,lastTime=d.getTime(),lastLeft=taskInfo.left;scope.currentBlob=blobIdObject.id;var blob=fileInfo.source.slice(taskInfo.start,taskInfo.end),reader=new FileReader;reader.onloadend=function(evt){if(null!==scope.currentBlob)if(evt.target.readyState===FileReader.DONE){var data=evt.target.result;data=data.substr(data.lastIndexOf(",")+1),dataService.addBlobChunk(scope.currentBlob,taskInfo.index,data).then(function(result){scope.currentBlob=result.id;var prcent=result.percent,isComplete=result.isComplete;isComplete&&scope.currentFolder.Children.push(result.file),taskInfo.applyNewData(evt.loaded);var dd=new Date,currentTime=dd.getTime(),interval=currentTime-lastTime;if(interval>=1e3){lastTime=currentTime;var currentLeft=taskInfo.left,transferredBytes=lastLeft-currentLeft;lastLeft=currentLeft,scope.transferRate=transferredBytes}taskInfo.left>0?(blob=fileInfo.source.slice(taskInfo.start,taskInfo.end),reader.readAsDataURL(blob)):scope.currentBlob=null,scope.percent=prcent,scope.$digest()},function(result){dataService.releaseBlob(scope.currentBlob),scope.currentBlob=null,alert(result),scope.$digest()})}else;else;},reader.readAsDataURL(blob)})},function(){})},scope.onUploadFolder=function(){alert("onUploadFolder")},scope.getData()}]),angular.module("explorer").controller("FileInstanceController",["$scope","$modalInstance",function(scope,modalInstance,items){scope.items=items,scope.selected={item:scope.items[0]},scope.ok=function(){modalInstance.close(scope.selected.item)},scope.cancel=function(){modalInstance.dismiss("cancel")}}]),angular.module("explorer").controller("FileLoadedController",["$scope","$modalInstance","fileInfo",function(scope,modalInstance,fileInfo){scope.name=fileInfo.name,scope.size=fileInfo.size,scope.ok=function(){modalInstance.close("Cheers")},scope.cancel=function(){modalInstance.dismiss("cancel")}}]),angular.module("explorer").controller("ItemOptionsController",["$scope","$timeout",function(scope){scope.folderItems=[{Title:"Delete",Action:"2"}],scope.fileItems=[{Title:"Delete",Action:"2"}],scope.getItems=function(){return scope.itemData.IsContainer?scope.folderItems:scope.fileItems},scope.onAction=function(argument){"1"===argument&&scope.download(scope.path),"2"===argument&&scope.delete(scope.itemData)}}]),angular.module("explorer").controller("NewFolderController",["$scope","$modalInstance","children",function(scope,modalInstance,children){scope.current={name:"Not Defined"},scope.getProposedName=function(){for(var result=!1,index=-1,template="New Folder",candidate="";!result;)index+=1,candidate=template,index>0&&(candidate=candidate+" "+index),result=scope.checkName(candidate);scope.current.name=candidate},scope.checkName=function(candidate){for(var result=!0,length=children.length,i=0;length>i;i++){var child=children[i];if(child.Name===candidate){result=!1;break}}return result},scope.ok=function(){scope.checkName(scope.current.name)?modalInstance.close(scope.current.name):alert("The name "+scope.current.name+" already exists")},scope.cancel=function(){modalInstance.dismiss("cancel")},scope.getProposedName()}]),angular.module("explorer").controller("TestController",["$scope","dataService","$modal",function(scope,dataService,modal){scope.currentFolder=null,scope.canBack=!1,scope.path=[],scope.isNavigating=!1,scope.percent=0,scope.currentBlob=null,scope.upload=function(){alert("cheers")},scope.getCurrentFolderId=function(){return null===scope.currentFolder?null:scope.currentFolder.Id},scope.getParentFolderId=function(){return null===scope.currentFolder?null:scope.currentFolder.Parent},scope.init=function(){scope.getData()},scope.getData=function(){alert("cheers")},scope.getFolder=function(id){scope.isNavigating=!0,dataService.getFolder(id).then(function(data){scope.isNavigating=!1,scope.applyScopeFolder(data)},function(error){scope.isNavigating=!1,alert(error)})},scope.applyScopeFolder=function(newFolder){scope.currentFolder=newFolder,scope.path.push(newFolder),scope.canBack=scope.path.length>1},scope.moveBack=function(){if(!(scope.path.length<2)){var prevoiusItem=scope.path[scope.path.length-2];void 0!==prevoiusItem&&null!==prevoiusItem&&scope.navigate(prevoiusItem.Id)}},scope.navigate=function(id){for(var length=scope.path.length,target=null,i=0;length>i;i++){var candidate=scope.path[i];if(candidate.Id===id)return target=candidate,scope.path.splice(i,length-i),void scope.applyScopeFolder(target)}scope.getFolder(id)},scope.download=function(item){scope.isDownloading=!0,dataService.download(item.Id).then(function(data){scope.isDownloading=!1,scope.saveFile(item.Name,data)},function(error){scope.isDownloading=!1,alert(error)})},scope.getDownloadUrl=function(treeItemData){return dataService.getDownloadUrl(treeItemData.Id)},scope.onDelete=function(node){scope.isNavigating=!0,dataService.delete(node.Id).then(function(data){if(scope.isNavigating=!1,data){for(var index=-1,length=scope.currentFolder.Children.length,i=0;length>i;i++){var candidate=scope.currentFolder.Children[i];if(node.Id===candidate.Id){index=i;break}}index>-1&&scope.currentFolder.Children.splice(index,1)}},function(error){scope.isNavigating=!1,alert(error)})},scope.saveFile=function(sourcePath,sourceData){var modalInstance=modal.open({templateUrl:"fileLoadedView.html",controller:"fileLoadedController",resolve:{fileInfo:function(){var data={name:sourcePath,size:sourceData.length};return data}}});modalInstance.result.then(function(){},function(){})},scope.onNewFolder=function(){var modalInstance=modal.open({templateUrl:"newFolderView.html",controller:"newFolderController",resolve:{children:function(){return scope.currentFolder.Children}}});modalInstance.result.then(function(newFolderName){dataService.newFolder(scope.currentFolder.Id,newFolderName).then(function(newFolder){scope.currentFolder.Children.push(newFolder)},function(error){alert(error)})},function(){})},scope.newTask=function(totalSize){var taskInfo={step:20480,start:0,end:0,total:0,left:0,index:0,percent:-1,refreshState:function(){this.end=this.left>this.step?this.start+this.step:this.start+this.left,this.percent=this.total>0?(this.total-this.left)/this.total:1},init:function(theTotalSize){this.total=theTotalSize,this.start=0,this.left=this.total,this.index=0,this.refreshState()},applyNewData:function(size){this.left=this.left-size,this.start=this.start+size,this.index=this.index+1,this.refreshState()}};return taskInfo.init(totalSize),taskInfo},scope.onStopUploading=function(){null!==scope.currentBlob&&(dataService.releaseBlob(scope.currentBlob),scope.currentBlob=null,scope.$digest())},scope.onUploadFile=function(){var modalInstance=modal.open({templateUrl:"uploadFileView.html",controller:"uploadFileController",resolve:{children:function(){return scope.currentFolder.Children}}});modalInstance.result.then(function(fileInfo){if(!(window.File&&window.FileReader&&window.FileList&&window.Blob))return void alert("File API не поддерживается данным браузером");var taskInfo=scope.newTask(fileInfo.source.size);dataService.initBlob(scope.currentFolder.Id,fileInfo.name,fileInfo.source.size,taskInfo.step).then(function(blobIdObject){scope.currentBlob=blobIdObject.id;var blob=fileInfo.source.slice(taskInfo.start,taskInfo.end),reader=new FileReader;reader.onloadend=function(evt){if(null!==scope.currentBlob)if(evt.target.readyState===FileReader.DONE){var data=evt.target.result;data=data.substr(data.lastIndexOf(",")+1),dataService.addBlobChunk(scope.currentBlob,taskInfo.index,data).then(function(result){scope.currentBlob=result.id;var prcent=result.percent,isComplete=result.isComplete;isComplete&&scope.currentFolder.Children.push(result.file),taskInfo.applyNewData(evt.loaded),taskInfo.left>0?(blob=fileInfo.source.slice(taskInfo.start,taskInfo.end),reader.readAsDataURL(blob)):scope.currentBlob=null,scope.percent=prcent,scope.$digest()},function(){scope.currentBlob=null,scope.$digest()})}else;else;},reader.readAsDataURL(blob)})},function(){})},scope.onUploadFolder=function(){alert("onUploadFolder")},scope.getData()}]),angular.module("explorer").controller("TreeFolderController",["$scope",function(scope){scope.name="No Name",scope.init=function(){var prefix="";0<scope.index&&(prefix="/"),scope.name=scope.itemData.Name},scope.select=function(){scope.navigate(scope.itemData.Id)}}]),angular.module("explorer").controller("TreeItemController",["$scope",function(scope){scope.name="No Name",scope.path=[],scope.id=null,scope.isFolder=null,scope.size=0;scope.init=function(){var node=scope.itemData;if(void 0!==node&&null!==node){scope.name=node.Name,scope.id=node.Id;var path=[];void 0!==node.ParentAbsolutePath&&null!==node.ParentAbsolutePath&&(path=path.concat(node.ParentAbsolutePath)),path.push(node.Name),scope.path=path,scope.isFolder=node.IsContainer;var iconName="modules/explorer/img/file.png";scope.isFolder?iconName="modules/explorer/img/folder.png":(scope.href=scope.getDownloadUrl(scope.itemData),scope.size=node.Size),scope.iconName=iconName}},scope.select=function(){scope.isFolder&&scope.navigate(scope.id)},scope.delete=function(){scope.onDelete(scope.itemData)}}]),angular.module("explorer").controller("UploadFileController",["$scope","$modalInstance","children",function(scope,modalInstance,children){scope.current={name:"Not Defined",size:0,path:{},file:void 0},scope.$watch("current.path",function(){if(null===scope.current.path||void 0===scope.current.path)scope.current.name="";else{var fileInfo=document.getElementById("source").files[0];if(void 0!==fileInfo){{new FileReader}scope.current.size=fileInfo.size,scope.current.name=fileInfo.name,scope.current.file=fileInfo}}scope.$digest()}),scope.check=function(){document.getElementById("source").files[0]},scope.getProposedName=function(){for(var result=!1,index=-1,template="New Folder",candidate="";!result;)index+=1,candidate=template,index>0&&(candidate=candidate+" "+index),result=scope.checkName(candidate);scope.current.name=candidate},scope.checkName=function(candidate){var result=!0;if(null!==children)for(var length=children.length,i=0;length>i;i++){var child=children[i];if(child.Name===candidate){result=!1;break}}return result},scope.ok=function(){if(scope.checkName(scope.current.name)){var fileInfo={source:scope.current.file,name:scope.current.name};modalInstance.close(fileInfo)}else alert("The name "+scope.current.name+" already exists")},scope.cancel=function(){modalInstance.dismiss("cancel")}}]),angular.module("explorer").directive("inputFileFix",function(){return{require:"ngModel",link:function(scope,el,attrs,ngModel){el.bind("change",function(){scope.$apply(function(){ngModel.$setViewValue(el.val()),ngModel.$render()})})}}}),angular.module("explorer").directive("showOnRowHover",[function(){return{link:function(scope,element){element.closest("tr").bind("mouseenter",function(){element.show()}),element.closest("tr").bind("mouseleave",function(){element.hide();var contextmenu=element.find("#contextmenu");contextmenu.click(),element.parent().removeClass("open")})}}}]),angular.module("explorer").directive("treeFolderData",[function(){return{restrict:"EA",templateUrl:"modules/explorer/views/tree-folder-view.client.view.html",replace:!1,controller:"TreeFolderController",link:function(scope){scope.init()}}}]),angular.module("explorer").directive("treeItemData",["$compile",function(){return{restrict:"EA",templateUrl:"modules/explorer/views/tree-item-view.client.view.html",replace:!0,controller:"TreeItemController",link:function(scope){scope.init()}}}]),angular.module("explorer").directive("uploaderButton",[function(){return{link:function(scope,elem){elem.bind("click",function(){$("#source").click()})}}}]),angular.module("explorer").filter("bytes",[function(){return function(bytes,precision){if(0===bytes||isNaN(parseFloat(bytes))||!isFinite(bytes))return"-";"undefined"==typeof precision&&(precision=1);var units=["bytes","KB","MB","GB","TB","PB"],number=Math.floor(Math.log(bytes)/Math.log(1024));return(bytes/Math.pow(1024,Math.floor(number))).toFixed(precision)+" "+units[number]}}]),angular.module("explorer").filter("percentage",["$filter",function($filter){return function(input,decimals){return $filter("number")(100*input,decimals)+"%"}}]),angular.module("explorer").service("DataService",["$http","$q","$location",function(http,q){var serverController="/explorer";this.httpRequest=function(method,url,data){var defer=q.defer(),promise=defer.promise,header={method:method,url:serverController+url,contentType:"application/json"};if(null!==data&&void 0!==data){var dataObject={};for(var key in data)dataObject[key]=data[key];header.data=dataObject}return http(header).then(function(response){defer.resolve(response.data)},function(response){defer.reject("Exception occured: "+response.status)}),promise},this.getData=function(){return this.httpRequest("GET","/Root",null)},this.getFolder=function(id){return this.httpRequest("POST","/Folder",{id:id})},this.download=function(id){return this.httpRequest("POST","/Download",{id:id})},this.delete=function(id){return this.httpRequest("POST","/Delete",{id:id})},this.newFolder=function(id,name){return this.httpRequest("POST","/NewFolder",{id:id,name:name})},this.getDownloadUrl=function(id){var url=serverController+"/Download?id="+id;return url},this.initBlob=function(parentId,name,totalSize,chunkSize){return this.httpRequest("POST","/InitBlob",{folderId:parentId,fileName:name,totalSize:totalSize,chunkSize:chunkSize})},this.addBlobChunk=function(blobId,chunkIndex,data){return this.httpRequest("POST","/AddBlobChunk",{blobId:blobId,chunkIndex:chunkIndex,data:data})},this.releaseBlob=function(blobId){return this.httpRequest("POST","/ReleaseBlob",{blobId:blobId})}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),function(){describe("AuthenticationController",function(){var AuthenticationController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,AuthenticationController=$controller("AuthenticationController",{$scope:scope})})),it("$scope.signin() should login with a correct user and password",function(){$httpBackend.when("POST","/auth/signin").respond(200,"Fred"),scope.signin(),$httpBackend.flush(),expect(scope.authentication.user).toEqual("Fred"),expect($location.url()).toEqual("/")}),it("$scope.signin() should fail to log in with nothing",function(){$httpBackend.expectPOST("/auth/signin").respond(400,{message:"Missing credentials"}),scope.signin(),$httpBackend.flush(),expect(scope.error).toEqual("Missing credentials")}),it("$scope.signin() should fail to log in with wrong credentials",function(){scope.authentication.user="Foo",scope.credentials="Bar",$httpBackend.expectPOST("/auth/signin").respond(400,{message:"Unknown user"}),scope.signin(),$httpBackend.flush(),expect(scope.error).toEqual("Unknown user")}),it("$scope.signup() should register with correct data",function(){scope.authentication.user="Fred",$httpBackend.when("POST","/auth/signup").respond(200,"Fred"),scope.signup(),$httpBackend.flush(),expect(scope.authentication.user).toBe("Fred"),expect(scope.error).toEqual(void 0),expect($location.url()).toBe("/")}),it("$scope.signup() should fail to register with duplicate Username",function(){$httpBackend.when("POST","/auth/signup").respond(400,{message:"Username already exists"}),scope.signup(),$httpBackend.flush(),expect(scope.error).toBe("Username already exists")})})}();